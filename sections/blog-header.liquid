{%- assign menu = section.settings.navigation_menu -%}
<script>

document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.querySelector('.predictive-search__input-articles');
    const resultsContainer = document.getElementById('predictive-search-results-articles');
    const closeButton = document.getElementById('close-article-search-button');
    let currentIndex = 0;
    const placeholders = [
        "Read About...",
        "Type here...",
        "What are you looking for?",
        "Find articles...",
    ];
  
    searchInput.addEventListener('input', function() {
        const query = this.value;
        closeButton.classList.add("hide")

        if (query.length < 3) {
            resultsContainer.innerHTML = '';
            return;
        }

        fetch(`/search/suggest.json?q=${query}&resources[type]=article&resources[limit]=6`)
            .then(response => response.json())
            .then(data => {
                resultsContainer.innerHTML = '';
                const articles = data.resources.results.articles;

                console.log(articles);

                if (articles.length > 0) {
                    articles.forEach(article => {
                        const articleElement = document.createElement('div');
                        articleElement.classList.add('predictive-search__result');

                        //<img src=${(article.featured_image.url).replace(".jpg","_75x75_crop_center.jpg").replace(".JPG","_75x75_crop_center.JPG")}>${article.title}</h4>

                        articleElement.innerHTML = `
                            <a class="article-link" href="${article.url}">
                                <span class="tags">${createTagsHtml(article.tags)}</span>
                                <h4 class="title"><span class="title-inner"><span>${article.title}</span></span><i>${formatDate(article.published_at)}</i></h4>
                                <p class="description">${stripHtml(article.body).substring(0, 100)}...</p>
                            </a>

                            
                        `;
                        resultsContainer.appendChild(articleElement);
                    });

                    closeButton.classList.remove("hide")
                } else {
                    resultsContainer.innerHTML = '<p class="predictive-search__no-results">No articles found.</p>';
                }
            })
            .catch(error => console.error('Error fetching search results:', error));
    });

    closeButton.addEventListener('click', function() {
        resultsContainer.innerHTML = '';
        closeButton.classList.add("hide");
    });

    function stripHtml(html) {
        var doc = new DOMParser().parseFromString(html, 'text/html');
        return doc.body.textContent || "";
    }
    function formatDate(dateString) {
        const date = new Date(dateString);
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        return `${day}.${month}.${year}`;
    }

    function createTagsHtml(tags) {
        return tags.map(tag => `<span class="article-tag">${tag}</span>`).join(' ');
    }


    // --- TYPED INPUT --- 
    const words = ["skin care", "exfoliation", "yoghurt", "silk"];
    let currentWordIndex = 0;
    let currentCharIndex = 0;
    let isDeleting = false;
    const baseText = "Read about ";
    const typeSpeed = 100;
    const eraseSpeed = 50;
    const delayBetweenWords = 1000;
    const cursorBlinkSpeed = 500;
    let displayText = baseText;
    let isCursorVisible = true;

    function type() {
        const word = words[currentWordIndex];
        
        if (!isDeleting) {
            currentCharIndex++;
            if (currentCharIndex === word.length + 1) {
                setTimeout(() => {
                    isDeleting = true;
                }, delayBetweenWords);
            }
        } else {
            currentCharIndex--;
            if (currentCharIndex === 0) {
                isDeleting = false;
                currentWordIndex = (currentWordIndex + 1) % words.length;
            }
        }

        displayText = baseText + word.substring(0, currentCharIndex);
        searchInput.setAttribute('placeholder', displayText + (isCursorVisible ? "|" : " "));

        if (!isDeleting) {
            setTimeout(type, typeSpeed);
        } else if (isDeleting) {
            setTimeout(type, eraseSpeed);
        }
    }

    setTimeout(type, typeSpeed);

    setInterval(() => {
        isCursorVisible = !isCursorVisible;
        searchInput.setAttribute('placeholder', displayText + (isCursorVisible ? "|" : " "));
    }, cursorBlinkSpeed);
});
</script>



<section>
<div class="container">
  <div class="page-header">

    <a href="/blogs/the-go-to-guide">
        <img src="{{ 'the-go-to-guide.png' | asset_img_url: "500x" }}" alt="The Go To Guide" class="blog-header-logo">
    </a>

    <form id="predictive-search-form-articles" action="{{ routes.search_url }}" method="get" class="predictive-search__form">
        {%- render 'icon' with 'header-search' -%}

        <button type="button" id="close-article-search-button" class="close-button hide" aria-label="Close">{%- render 'icon' with 'close' -%}</button>

        <input class="predictive-search__input-articles" type="text" name="q" autocomplete="off" autocorrect="off" aria-label="{{ 'search.general.title' | t }}" placeholder="Read about ">

        <div id="predictive-search-results-articles" class="predictive-search__results"></div>
    </form>

  
    <link-bar class="link-bar">
      <div class="container">
        <div class="link-bar__wrapper">
          <div class="link-bar__scroller hide-scrollbar">
            <ul class="link-bar__linklist list--unstyled" role="list">
                {%- for link in menu.links -%}
                <li class="link-bar__link-item {% if canonical_url contains link.url %}link-bar__link-item--selected text--underlined{% endif %}">
                  <a href="{{ link.url }}">
                    {{ link.title }}
                  </a>
                </li>
              {%- endfor -%}
            </ul>
          </div>
        </div>
      </div>
    </link-bar>
  </div>
</div>
</section>

{% schema %}
    {
      "name": "Blog Header",
      "class": "shopify-section--blog-header",
      "settings": [
        {
        "type": "link_list",
        "id": "navigation_menu",
        "label": "Menu",
        "default": "main-menu"
        }
      ]
    }
    {% endschema %}